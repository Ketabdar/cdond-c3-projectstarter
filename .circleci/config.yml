version: 2.1

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  aws:
    docker:
      - image: amazon/aws-cli  
  python:
    docker:
      - image: python:3.9.0-alpine  

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name Udapeople-Backend-Stack-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name Udapeople-Frontend-Stack-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd backend
              npm install
              npm run migrations:revert
            fi          
            
jobs:
  build-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend build
          command: |
            cd frontend
            npm i
            npm run build      
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend build
          command: |
            cd backend
            npm i
            npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend test
          command: |
            cd frontend
            npm i
            npm run test 
                
  test-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend test
          command: |
            cd backend
            npm i
            npm run test 
            
  scan-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: frontend scan
          command: |
            cd frontend
            npm audit --audit-level=critical

  scan-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: backend scan
          command: |
            cd backend
            npm audit fix --audit-level=critical  


  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=pr5-backend \
              --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=pr5-backend" \
              --output text)
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT \
              --data "$BACKEND_IP" https://api.memstash.io/values/BACKEND_IP  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=pr5-frontend \
              --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Install tar and gzip to support workspaces
          command: yum install -y tar && yum install -y gzip
      - run:
          name: Add back-end url to ansible inventory
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=pr5-backend" \
              --output text) 
            echo $BACKEND_IP >> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: 4f2400fd-47a1-4720-9a04-38ab8e388225" \
              --request PUT \
              --data $BACKEND_IP \
              https://api.memstash.io/values/BACKEND_IP
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ./
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environments:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}    

  configure-infrastructure:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["3d:88:eb:e5:e2:f9:02:e3:d6:16:7a:34:ec:bc:15:6b"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add tar
            apk add gzip
            apk add --update ansible
            pip install awscli
            apk add openssh-client
            apk add curl
      - run:
          name: Configure server
          command: |
            touch backend/.env
            echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
            echo $(curl -H "token: 4f2400fd-47a1-4720-9a04-38ab8e388225" \
             --request GET https://api.memstash.io/values/backend_ip) >> .circleci/ansible/inventory.txt
            cd .circleci/ansible
            echo $PWD
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ./
          paths:
            - backend/.env
      - destroy-environments:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}                


  run-migrations:
    executor: node
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend &&
            npm i &&
            npm run migrations > migration_results.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep -q "has been executed successfully" migration_results.txt 
            then curl -H "Content-Type: text/plain" -H "token: 4f2400fd-47a1-4720-9a04-38ab8e388225" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else curl -H "Content-Type: text/plain" -H "token: 4f2400fd-47a1-4720-9a04-38ab8e388225" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
      - destroy-environments:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}     

  deploy-frontend:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum update
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Deploy frontend objects
          command: |
            BACKEND_IP=$(curl -H "token: 4f2400fd-47a1-4720-9a04-38ab8e388225" --request GET https://api.memstash.io/values/udapeople-backend-ip)
            echo $BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL
            cd frontend
            echo "API_URL=$API_URL" >> .env
            npm i
            npm update
            npm audit fix --audit-level=critical --force
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
      - destroy-environments:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}     
                    
  deploy-backend:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["3d:88:eb:e5:e2:f9:02:e3:d6:16:7a:34:ec:bc:15:6b"]
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update zip
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cat .circleci/ansible/inventory.txt
            cat backend/.env
            zip -r backend.zip backend
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environments:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}  

  smoke-test:
    executor: python 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            sleep 60
            BACKEND_IP=$(curl -H "token: 4f2400fd-47a1-4720-9a04-38ab8e388225" --request GET https://api.memstash.io/values/udapeople-backend-ip)
            curl "http://$BACKEND_IP:3030/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
            return 0
            else
            return 1
            fi
      - destroy-environments:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID} 

  cloudfront-update:
    executor: aws
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name udapeople \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}" \
            --tags project=Udapeople-Cloudfront
      - destroy-environments:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}  

  cleanup:
    executor: aws
    steps:
      - checkout
      - run:
          name: Get old stack workflow id and remove old stacks and files
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation list-exports \
            --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            export STACKS=$(aws cloudformation list-stacks \
            --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)
            echo $OLD_WORKFLOW_ID
            echo $STACKS
            if [[ "${STACKS[@]}" =~ "${OLD_WORKFLOW_ID}" ]]
            then
              aws cloudformation delete-stack --stack-name Udapeople-Backend-Stack-${OLD_WORKFLOW_ID}
              aws s3 rm s3://udapeople-${OLD_WORKFLOW_ID} --recursive
              aws cloudformation delete-stack --stack-name Udapeople-Frontend-Stack-${OLD_WORKFLOW_ID}
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]