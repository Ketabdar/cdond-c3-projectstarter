version: 2.1

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  aws:
    docker:
      - image: amazon/aws-cli  
  python:
    docker:
      - image: python:3.9.0-alpine      
            
jobs:
  build-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend build
          command: |
            cd frontend
            npm i
            npm run build      
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend build
          command: |
            cd backend
            npm i
            npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: frontend test
          command: |
            cd frontend
            npm i
            npm run test 
                
  test-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: backend test
          command: |
            cd backend
            npm i
            npm run test 
            
  scan-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: frontend scan
          command: |
            cd frontend
            npm audit --audit-level=critical

  scan-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: backend scan
          command: |
            cd backend
            npm audit fix --audit-level=critical  


  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=pr5-backend \
              --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
            BACKEND_URL=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=pr5-backend" \
              --output text)
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT \
              --data "$BACKEND_URL" https://api.memstash.io/values/BACKEND_URL  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=pr5-frontend \
              --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Install tar and gzip to support workspaces
          command: yum install -y tar && yum install -y gzip
      - run:
          name: Add back-end url to ansible inventory
          command: |
            BACKEND_URL=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=pr5-backend" \
              --output text) 
            echo $BACKEND_URL >> .circleci/ansible/inventory.txt
            curl -H "Content-Type: text/plain" -H "token: 4f2400fd-47a1-4720-9a04-38ab8e388225" \
              --request PUT \
              --data $BACKEND_URL \
              https://api.memstash.io/values/BACKEND_URL
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ./
          paths:
            - .circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 

  configure-infrastructure:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["3d:88:eb:e5:e2:f9:02:e3:d6:16:7a:34:ec:bc:15:6b"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add tar
            apk add gzip
            apk add --update ansible
            pip install awscli
            apk add openssh-client
            apk add curl
      - run:
          name: Configure server
          command: |
            touch ~/cdond-c3-projectstarter/backend/.env
            echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cat backend/.env
            echo $(curl -H "token: 4f2400fd-47a1-4720-9a04-38ab8e388225" \
             --request GET https://api.memstash.io/values/backend_url) >>  ~/cdond-c3-projectstarter/.circleci/ansible/inventory.txt
            cd .circleci/ansible
            echo $PWD
            ansible-playbook -i inventory.txt configure-server.yml
      #- revert-migrations
      #- destroy-environment # Rollback on failure                 


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
      #- scan-backend:
      #    requires: [build-backend]
      #- scan-frontend:
      #    requires: [build-frontend]
      - deploy-infrastructure:
          requires: [build-frontend, build-backend] 
      - configure-infrastructure:
          requires: [deploy-infrastructure]       